@page "/EditGame/{userId:int}/{gameId:int}"
@using ThePowerOfKnowledge.Shared.Entities;
@inject HttpClient Http
@inject NavigationManager nav
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IJSRuntime js

@*<h3>עריכת משחק</h3>*@
@*//בדיקה*@

@*בדיקה שאכן יש משהו במשחק*@
@if (currentGame != null)
{
    @*//תפריט עליון*@
    <TopManue IsEditPage="true" IsLogInPage="false" UserID="userId" GameId="gameId" IsGamePage="false"></TopManue>
    @*הגדרות משחק כלליות*@


    ////מכיל את כל איזור העריכה
    ///

    <MudContainer Width="70%" Fixed="true">
        @*//מכיל את הגדרות המשחק*@
        <MudContainer>
                <MudText Typo="Typo.h2">הגדרות משחק</MudText>
                <MudTextField Class="textTopic" T="string" Counter="20" MaxLength="20" HelperText="מספר התווים: " Immediate="true" Validation="@(new Func<string, IEnumerable<string>>(MaxCharacters20))" Label="נושא המשחק: " Variant="Variant.Outlined" @bind-Value="currentGame.GameTopic" />
                <br />


                @*שגיאה של לא הוכנס שום ערך לתוכן נושא*@
                @if (AlertEmptyTopic == true)
                {
                    <MudAlert Class="typetopicgame" Severity="Severity.Warning" Variant="Variant.Outlined">יש להזין נושא למשחק</MudAlert>
                }








                <MudText Typo="Typo.h2">הנחייה</MudText>
                @*שורה של הנחייה*@
                <MudGrid>
                    <MudItem xs="3">
                        <MudText Class="CatchTheApple">איספו בעזרת תנועת חיצים את כל התפוחים שעליהם </MudText>
                    </MudItem>
                    <MudItem xs="6">


                        @*בדיקה שאין שגיאה מבדיקת אורך של התמונה*@
                        @if (currentGame.GameQuestionImge != null)
                        {


                            <MudTextField Class="CountOfWithImg" T="string" Counter="35" MaxLength="35" HelperText="מספר התווים עם תמונה: " Immediate="true" Validation="@(new Func<string, IEnumerable<string>>(MaxCharacters35))" Label="המשך ההנחייה: " Variant="Variant.Outlined" @bind-Value="currentGame.GameQuestionText" AutoFocus="shortInputQwastion" />

                        }

                        @*במידה והתמונה ריקה*@
                        @if (currentGame.GameQuestionImge == null)
                        {

                            <MudTextField Class="textDirective" T="string" Counter="50" MaxLength="50" HelperText="מספר התווים ללא תמונה: " Immediate="true" Validation="@(new Func<string, IEnumerable<string>>(MaxCharacters50))" Label="המשך ההנחייה: " Variant="Variant.Outlined" @bind-Value="currentGame.GameQuestionText" />
                        }
                    </MudItem>


                    <MudItem xs="3">
                        @*אם אין תמונה*@
                        @if (currentGame.GameQuestionImge == null)
                        {
                            <InputFile id="fileInput1" hidden accept="image/png, image/gif, image/jpeg" OnChange="UploadFileGame" />

                            <MudIconButton Class="updatephoto2" HtmlTag="label"
                                           Color="Color.Info"
                                           Icon="@Icons.Filled.PhotoCamera"
                                           for="fileInput1"
                                           Disabled="@imgIsOnGame()"
                                           Size="Size.Large">
                            </MudIconButton>
                        }


                        @*אם יש תמונה*@
                        @if (currentGame.GameQuestionImge != null)
                        {

                            <MudCard Class="theimgfromuser">
                                <MudCardContent Class="TheImage">

                                    <img src="@currentGame.GameQuestionImge" width="140" height="140" />

                                </MudCardContent>

                                <MudCardActions Class="deletetheimagefromuser">
                                    <MudIconButton Color="Color.Info"
                                                   Icon="@Icons.Filled.Delete"
                                                   @onclick="@(()=>FakeDeletImgQwation(currentGame.GameQuestionImge))"
                                                   Disabled="@imgIsOffGame()"
                                                   Size="Size.Medium">
                                    </MudIconButton>

                                </MudCardActions>
                            </MudCard>

                        }


                    </MudItem>
                </MudGrid>



                @*שגיאה של תמונה גדולה מדי*@
                <div Class="imgTooBig">
                    @if (AlertTooBigImgGame == true)
                    {
                        <MudAlert Severity="Severity.Warning" Variant="Variant.Outlined">התמונה חורגת ממגבלת הגודל </MudAlert>

                    }
                </div>


                @*שגיאה של לא הוכנס שום ערך לתוכן שאלה*@
                @if (AlertEmptyQwastion == true)
                {
                    <MudAlert Class="typedirective" Severity="Severity.Warning" Variant="Variant.Outlined">יש להזין טקסט להמשך ההנחייה</MudAlert>
                }



                @*//שמירת הגדרות המשחק*@
                <MudButton Class="SaveTheGameIcon" @onclick="() => SaveGame(currentGame)" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" IconColor="Color.Secondary" Size="Size.Large">שמירת הגדרות משחק</MudButton>

        </MudContainer>




        @*//איזור עריכת פריט*@
        <MudContainer>

            @*אם יש יותר מדי פריטים*@
            @if (reachMaxItemNum() == true && currentAnswerEdite.ID == 0)
            {
                @*שגיאה של יותר מדי פריטים*@
                <MudAlert Class="NoMoreItems" Severity ="Severity.Warning" Variant="Variant.Outlined">הגעת למגבלת הפריטים האפשריים במשחק, לא ניתן להזין למשחק יותר מ30 פריטים.</MudAlert>

            }


            @*אם לא הגענו למגבלת פריטים*@
            @if (reachMaxItemNum() == false || currentAnswerEdite.ID != 0)
            {
        <MudContainer>
            @if (currentAnswerEdite.ID == 0)
            {
                <MudText Class="AddItemH2" Typo="Typo.h2">הוספת פריט</MudText>
            }
            @if (currentAnswerEdite.ID != 0)
            {
                <MudText Typo="Typo.h2">עריכת פריט</MudText>
            }


            <MudGrid>
                <MudItem xs="6">
                    @*אם יש תמונה*@
                    @if (currentAnswerEdite.HaveImge == true)
                    {
                        <MudCard Class="CardImage">
                            <MudCardHeader Class="TheImgInItems">
                                <MudText>תוכן הפריט: </MudText>
                            </MudCardHeader>
                            <MudCardContent Class="TheWidthOfTheImageItem">
                                <img src="@currentAnswerEdite.Content" width="150" height="150" />
                            </MudCardContent>
                            <MudCardActions Class="imgimgimg">
                                @*מחיקה פיקטיבית*@

                                <MudIconButton Class="DeleteTheimagefromuser2"
                                               Color="Color.Info"
                                               Icon="@Icons.Filled.Delete"
                                               @onclick="@(()=>FakeDeletImgAnswer(currentAnswerEdite.Content))"
                                               Disabled="@imgIsOffAnswer()">
                                </MudIconButton>

                            </MudCardActions>
                        </MudCard>
                    }


                    @*אם אין תמונה*@
                    @if (currentAnswerEdite.HaveImge == false)
                    {
                        <MudTextField Class="newAnswer" T="string" Counter="25" MaxLength="25" HelperText="מספר התווים: " Immediate="true" Validation="@(new Func<string, IEnumerable<string>>(MaxCharacters25))" Label="תוכן הפריט: " Variant="Variant.Outlined" @bind-Value="currentAnswerEdite.Content" Disabled="@currentAnswerEdite.HaveImge" />
                    }
                </MudItem>


                @*אם אין תמונה*@
                @if (currentAnswerEdite.HaveImge == false)
                {
                    <MudItem xs="2">
                        <MudText Class="or">או</MudText>
                    </MudItem>

                    <MudItem xs="2">


                        <InputFile id="fileInput2" hidden accept="image/png, image/gif, image/jpeg" OnChange="UploadFileAnswer" />

                        <MudIconButton Class="updatephoto" HtmlTag="label"
                                       Color="Color.Info"
                                       Icon="@Icons.Filled.PhotoCamera"
                                       for="fileInput2"
                                       Disabled="@currentAnswerEdite.HaveImge"
                                       Size="Size.Large">
                        </MudIconButton>
                    </MudItem>

                }

            </MudGrid>




            @*שגיאה של תמונה גדולה מדי*@
            <div class="ImgTooBig2">
            @if (AlertTooBigImgAnswer == true)
            {
                <MudAlert Severity="Severity.Warning" Variant="Variant.Outlined">התמונה חורגת ממגבלת הגודל</MudAlert>
            }
            @*שגיאה של לא הוכנס שום ערך לתוכן פריט*@
            @if (AlertEmptyAnswer == true)
            {
                <MudAlert Class="typeitem" Severity="Severity.Warning" Variant="Variant.Outlined">יש להזין טקסט או תמונה לתוכן הפריט</MudAlert>
            }
            </div>



            <MudGrid>
                <MudItem xs="6">
                    <MudText>סמנו <MudIcon Class="CheckifCorrect" Color="Color.Success" Icon="@Icons.Filled.Check"></MudIcon> במידה והפריט מתאים להנחייה</MudText>
                </MudItem>
                <MudItem xs="2">
                    <MudCheckBox Class="NoHover" @bind-Checked="@currentAnswerEdite.CorrectAnswer" Color="Color.Success" Size="Size.Large"></MudCheckBox>
                </MudItem>
            </MudGrid>



            @*כפתור שמירת פריט*@
            <MudButton Class="saveSetting" @onclick="() => SaveAnswer(currentAnswerEdite)" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" IconColor="Color.Primary" Size="Size.Large">שמירת פריט</MudButton>



            @*בדיקה האם זו ערכית פריט*@
            @if (currentAnswerEdite.ID != 0)
            {
                //כפתור ביטול עריכה
                <MudButton Class="DeleteEdit" @onclick="() => BackToAnswerBeforEditing()" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" IconColor="Color.Secondary" Size="Size.Large">ביטול עריכה</MudButton>
            }

        </MudContainer>

            }
        </MudContainer>

    </MudContainer>








    @*טבלת פריטים*@
    <MudContainer Class="abc">
        @*<MudPaper Height="100%" Width="100%" Outlined="true">*@
        <MudPaper Class="TableItems">
            @*מחלק לשתי עמודות*@
            <MudGrid>
                @*פריטים נכונים*@
                <MudItem xs="6">
                    <MudText Typo="Typo.h3">פריטים מתאימים</MudText>

                    <MudText Class="numberOfRightItems">מספר פריטים: @boolAnswerCount(true) </MudText>



                    @*מכיל את כל הפריטים*@
                    <MudContainer Class="correctAnswer">
                        @*חוזר לכל התשובות*@
                        @foreach (Answer currentAnswer in currentGame.GameAnswers)
                        {
                            //מציג רק אם התשובה נכונה
                            @if (currentAnswer.CorrectAnswer == true)
                            {


                                //כרטיסייה
                        <MudCard Class="Bdikabdika" Outlined="@EditingThisNow(currentAnswer)">
                            @*במידה ואין תמונה*@

                            @if (currentAnswer.HaveImge == false)
                            {
                                <MudCardContent>
                                    <MudText Class="CorrectAns">
                                        @currentAnswer.Content
                                    </MudText>
                                </MudCardContent>

                            }


                            @*//במידה ויש תמונה*@
                            @*<div class="wrapperTheImg2">*@
                            @if (currentAnswer.HaveImge == true)
                            {
                        <div class="wrapperTheImg2">
                            <div class="ScaledRight">
                                <img src="@currentAnswer.Content" width="130" height="130" />
                            </div>
                        </div>
                                    }
                                    @*</div>*@


                                    @*כפתורים בתחתית הכרטיסייה*@
                                    <MudCardActions Class="IconsInTheCorrectAnswers">
                                        <MudIconButton Class="edititem" @onclick="() => AnswerToEditePlace(currentAnswer)" Icon="@Icons.Filled.Edit" Color="Color.Default" />
                                        <MudIconButton Class="deleteitem" @onclick="() => DeleteAnswer(currentAnswer)" Icon="@Icons.Filled.Delete" Color="Color.Default" />
                                    </MudCardActions>
                            </MudCard>
                            }
                        }

                    </MudContainer>







                    @*פריטים לא נכונים*@
                </MudItem>
                <MudItem xs="6">
                    <MudText Typo="Typo.h3">פריטים לא מתאימים</MudText>
                    <MudText Class="numberOfWrongItems">מספר פריטים: @boolAnswerCount(false) </MudText>

                    <MudContainer Class="WrongAnswers">
                        @*חוזר לכל התשובות*@
                        @foreach (Answer currentAnswer in currentGame.GameAnswers)
                        {
                            //מציג רק לתשובה לא נכונה
                            @if (currentAnswer.CorrectAnswer == false)
                            {
                                //כרטיסייה
                        <MudCard Outlined="@EditingThisNow(currentAnswer)">
                            @*במידה ואין תמונה*@
                            @if (currentAnswer.HaveImge == false)
                            {
                                <MudCardContent>
                                    <MudText Class="WrongAns">
                                        @currentAnswer.Content
                                    </MudText>
                                </MudCardContent>

                            }
                            @*במידה ויש תמונה*@


                            @if (currentAnswer.HaveImge == true)
                            {
                                <div class="wrapperTheImg"> <div class="ScaledWrong">
                                   <img src="@currentAnswer.Content" width="130" height="130" />
                                         </div>
                                    </div>
                            }


                            @*כפתורים*@
                            <MudCardActions Class="IconsInTheWrongAnswers">
                                <MudIconButton Class="edititem2" @onclick="() => AnswerToEditePlace(currentAnswer)" Icon="@Icons.Filled.Edit" Color="Color.Default" />
                                <MudIconButton Class="deleteitem2" @onclick="() => DeleteAnswer(currentAnswer)" Icon="@Icons.Filled.Delete" Color="Color.Default" />
                            </MudCardActions>
                        </MudCard>
                            }
                        }

                    </MudContainer>
                </MudItem>

            </MudGrid>
        </MudPaper>
    </MudContainer>





}



@code {
    //פרמטר המקבל ID של משחר בשורת הכתובה
    [Parameter]
    public int gameId { get; set; }

    //פרמטר המקבל ID של משתמש בשורת הכתובת
    [Parameter]
    public int userId { get; set; }

    //שומר את המשחק שעליו פועלים
    Game currentGame;

    //  מחרוזת ששמורת את הערך של הודעת השגיאה
    string ErorContent;
    //תוכן כפתור הודעת שגיאה
    string ErorButtonContent;

    //פריט חדש בטעינת עמוד
    Answer currentAnswerEdite = new Answer();

    //האם יש צורך בהודעת שגיאה של פריט ריק
    bool AlertEmptyAnswer = false;
    //האם יש צורך בהודעת שגיאה של נושא ריק
    bool AlertEmptyTopic = false;
    //האם יש צורך בהודעת שגיאה של הנחייה ריק
    bool AlertEmptyQwastion = false;
    //האם יש צורך בהודעת שגיאה של תמונה גדולה מדי במשחק
    bool AlertTooBigImgGame = false;
    //האם יש צורך בהודעת שגיאה של תמונה גדולה מדי בפריט
    bool AlertTooBigImgAnswer = false;

    //של תמונות למשחק
    string myFileImage;
    long maxFileSize = 4194304;
    //מחיקת תמונה מהמשחק
    List<string> DeletedImages = new List<string>();


    //של תמונות לפריט
    string myFileImage1;
    //מחיקת תמונה מפריט
    List<string> DeletedImages1 = new List<string>();

    //שמירת התמונה המקורית בעריכה
    string OriginalImg;

    ///משתנה של פוקוס אוטומטי במקרה של העלאת תמונה בהנחייה
    bool shortInputQwastion=false;

    //רשימה של תמונות שצריך למחוק בשמירה
    //הנחייה
    List<string> ImgToDeletFromFolderQwation = new List<string>();
    //מסיח
    List<string> ImgToDeletFromFolderAnswer = new List<string>();


    //שליפת המשחק המדובר מבסיס הנתונים בטעינת עמוד
    protected async override Task OnInitializedAsync()
    {
        var getResponse = await Http.GetAsync("api/Games/byGameId/" + userId + "/" + gameId);
        if (getResponse.IsSuccessStatusCode)
        {
            currentGame = new Game();
            currentGame = getResponse.Content.ReadFromJsonAsync<Game>().Result;

        }
        //   אם חזרה שגיאה אז נפתח פופ אפ עם הודעת שגיאה מותאמת
        else
        {
            string ErorType = getResponse.Content.ReadAsStringAsync().Result;

            switch (ErorType)
            {
                case "User not found":
                    ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן שלא מצאנו את המשתמש המדהים שלך.";
                    ErorButtonContent = "חזרה לעמוד התחברות";
                    break;
                case "User not login":
                    ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן שלא התחברת למערכת.";
                    ErorButtonContent = "חזרה לעמוד התחברות";
                    break;
                case "EmptySession":
                    ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן ששעבר יותר מדי זמן ללא פעולה באתר ועליך להתחבר שוב למערכת.";
                    ErorButtonContent = "חזרה לעמוד התחברות";
                    break;
                default:
                    ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן שיש לנו תקלה בשרת. חכה מספר דקות ורענן את העמוד.";
                    ErorButtonContent = "הבנתי";
                    break;
            }
            OpenErorDialog();
        }
    }









    //שיטה של עדכון מסיח או שמירת מסיח חדש
    private async Task SaveAnswer(Answer TheAnswer)
    {
        //איפוס התראות
        AlertEmptyAnswer = false;


        //תנאי לשמירה
        if (TheAnswer.Content != null)
        {

            //הוספה של מספר משחק
            if (TheAnswer.GameID != currentGame.ID)
            {
                TheAnswer.GameID = currentGame.ID;
            }

            //למסיח חדש
            if (TheAnswer.ID == 0)
            {
                //שליחת משחק חדש לבסיס נתונים
                var postResponse = await Http.PostAsJsonAsync("api/Answers/NewAnswer/" + userId + "/" + currentGame.ID, TheAnswer);
                //קבלת אישור פעולה
                if (postResponse.IsSuccessStatusCode == true)
                {
                    //עדכון המידע בעמוד
                    Game tempGame = postResponse.Content.ReadFromJsonAsync<Game>().Result;
                    currentGame.GameAnswers = tempGame.GameAnswers;

                    //סנקבר
                    Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;
                    Snackbar.Add("המסיח נשמר", Severity.Success, (options) =>
                    {
                        options.CloseAfterNavigation = true;
                    }
                    );

                    //מחיקת כל התמונות הזמניות
                    await DeleteImageAnswer(ImgToDeletFromFolderAnswer);
                }
                //במקרה של שגיאה פתיחת פופ אפ שגיאה מתאים
                else
                {
                    //במידה והיתה שגיאה בדרך הצגת חלום שגיאה מתאים
                    string ErorType = postResponse.Content.ReadAsStringAsync().Result;

                    switch (ErorType)
                    {
                        case "Answer not found":
                            ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן שלא מצאנו את הפריט המדהים שלך.";
                            ErorButtonContent = "הבנתי";
                            break;
                        case "GameId Not Match":
                            ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן שיש שגיאה במשחק אליו משוייך המסיח. ";
                            ErorButtonContent = "הבנתי";
                            break;
                        case "User not login":
                            ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן שלא התחברת למערכת.";
                            ErorButtonContent = "חזרה לעמוד התחברות";
                            break;
                        case "EmptySession":
                            ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן ששעבר יותר מדי זמן ללא פעולה באתר ועליך להתחבר שוב למערכת.";
                            ErorButtonContent = "חזרה לעמוד התחברות";
                            break;
                        default:
                            ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן שיש לנו תקלה בשרת. חכה מספר דקות ורענן את העמוד.";
                            ErorButtonContent = "הבנתי";
                            break;
                    }
                    OpenErorDialog();

                }


            }

            //לעדכון מסיח
            else
            {
                //שליחת מידע לבסיס נתונים
                var updateResponse1 = await Http.PostAsJsonAsync("api/Answers/Update/" + userId + "/" + currentGame.ID, TheAnswer);
                //אישור ביצוע פעולה
                if (updateResponse1.IsSuccessStatusCode == true)
                {
                    //עדכון המידע בעמוד
                    Game tempGame = updateResponse1.Content.ReadFromJsonAsync<Game>().Result;
                    currentGame.GameAnswers = tempGame.GameAnswers;
                    //סנקבר
                    Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;
                    Snackbar.Add("המסיח נשמר", Severity.Success, (options) =>
                    {
                        options.CloseAfterNavigation = true;
                    }
                    );
                    //מחיקת כל התמונות הזמניות
                    await DeleteImageAnswer(ImgToDeletFromFolderAnswer);
                }
                //במקרה של שגיאה פתיחת פופ אפ שגיאה מתאים
                else
                {
                    //במידה והיתה שגיאה בדרך הצגת חלום שגיאה מתאים
                    string ErorType1 = updateResponse1.Content.ReadAsStringAsync().Result;

                    switch (ErorType1)
                    {
                        case "Answer not found":
                            ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן שלא מצאנו את הפריט המדהים שלך.";
                            ErorButtonContent = "הבנתי";
                            break;
                        case "GameId Not Match":
                            ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן שיש שגיאה במשחק אליו משוייך המסיח. ";
                            ErorButtonContent = "הבנתי";
                            break;
                        case "User not login":
                            ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן שלא התחברת למערכת.";
                            ErorButtonContent = "חזרה לעמוד התחברות";
                            break;
                        case "EmptySession":
                            ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן ששעבר יותר מדי זמן ללא פעולה באתר ועליך להתחבר שוב למערכת.";
                            ErorButtonContent = "חזרה לעמוד התחברות";
                            break;
                        default:
                            ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן שיש לנו תקלה בשרת. חכה מספר דקות ורענן את העמוד.";
                            ErorButtonContent = "הבנתי";
                            break;
                    }
                    OpenErorDialog();

                }
            }
            //במקרה שהיתה תמונה ומוחקים אותה
            if (OriginalImg != null)
            {
                DeletedImages.Add(OriginalImg);
                var saveResponse = await Http.PostAsJsonAsync("api/Games/deleteImages/" + userId, DeletedImages);

                if (saveResponse.IsSuccessStatusCode == true)
                {                    
                    OriginalImg = null;
                }
                // במקרה של שגיאה פתיחת פופ אפ שגיאה מתאים
                else
                {
                    string ErorType = saveResponse.Content.ReadAsStringAsync().Result;

                    switch (ErorType)
                    {
                        case "User not login":
                            ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן שלא התחברת למערכת.";
                            ErorButtonContent = "חזרה לעמוד התחברות";
                            break;
                        case "EmptySession":
                            ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן ששעבר יותר מדי זמן ללא פעולה באתר ועליך להתחבר שוב למערכת.";
                            ErorButtonContent = "חזרה לעמוד התחברות";
                            break;
                        default:
                            ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן שיש לנו תקלה בשרת. חכה מספר דקות ורענ ן את העמוד.";
                            ErorButtonContent = "הבנתי";
                            break;
                    }
                    OpenErorDialog();
                }
            }

            //איפוס התיבה
            currentAnswerEdite = new Answer();
        }
        else
        {
            //הצגת אלרט שגיאה מסיח ריק
            AlertEmptyAnswer = true;
            //סנקבר
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;
            Snackbar.Add("המסיח לא נשמר", Severity.Error, (options) =>
            {
                options.CloseAfterNavigation = true;
            }
            );
        }

    }





    //שיטה של עדכון משחק
    private async Task SaveGame(Game GameToChack)
    {
        //איפוס התראות
        AlertEmptyQwastion = false;
        AlertEmptyTopic = false;

        //בדיקה שהמשחק לא ריק
        if (GameToChack.GameTopic != null && GameToChack.GameQuestionText != null && GameToChack.GameTopic.Length > 0 && GameToChack.GameQuestionText.Length > 0)
        {
            ///הגנה נגד שמירה עם הנחייה ארוכה מהמותר במקרה שכתבו אחת ואז העלו תמונה
            if (currentGame.GameQuestionImge != null && currentGame.GameQuestionText.Length > 35)
            {
                //סנקבר
                Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;
                Snackbar.Add("המשחק ההנחיה אינו עומד בקריטריונים", Severity.Error, (options) =>
                {
                    options.CloseAfterNavigation = true;
                }
                );
            }
            else
            {


                //בדיקה שיש למשחק קוד משחק ובמידה ואין הזנה של אחד
                if (GameToChack.GamePin == 0)
                {
                    GameToChack.GamePin = GameToChack.ID + 100;
                }

                //שליחת מידע לבסיס נתונים
                var updateResponse = await Http.PostAsJsonAsync("api/Games/Update/" + userId, GameToChack);
                //אישור ביצוע פעולה
                if (updateResponse.IsSuccessStatusCode == true)
                {
                    //עדכון המידע בעמוד
                    currentGame = updateResponse.Content.ReadFromJsonAsync<Game>().Result;

                    //סנקבר
                    Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;
                    Snackbar.Add("המשחק נשמר", Severity.Success, (options) =>
                    {
                        options.CloseAfterNavigation = true;
                    }
                    );

                    //מחיקת כל התמונות הזמניות
                    await DeleteImageGame(ImgToDeletFromFolderQwation);
                }
                else
                {
                    //במידה והיתה שגיאה בדרך הצגת חלום שגיאה מתאים
                    string ErorType1 = updateResponse.Content.ReadAsStringAsync().Result;

                    switch (ErorType1)
                    {
                        case "User not found":
                            ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן שלא מצאנו את המשתמש המדהים שלך.";
                            ErorButtonContent = "חזרה לעמוד התחברות";
                            break;
                        case "Game not found":
                            ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן שלא מצאנו את המשחק המדהים שלך. ";
                            ErorButtonContent = "הבנתי";
                            break;
                        case "User not login":
                            ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן שלא התחברת למערכת.";
                            ErorButtonContent = "חזרה לעמוד התחברות";
                            break;
                        case "EmptySession":
                            ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן ששעבר יותר מדי זמן ללא פעולה באתר ועליך להתחבר שוב למערכת.";
                            ErorButtonContent = "חזרה לעמוד התחברות";
                            break;
                        default:
                            ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן שיש לנו תקלה בשרת. חכה מספר דקות ורענן את העמוד.";
                            ErorButtonContent = "הבנתי";
                            break;
                    }
                    OpenErorDialog();
                }
            }

        }
        else
        {

            //לא עומד בתנאי שמירה
            //חסר טקסט להנחייה
            if (GameToChack.GameQuestionText == null || GameToChack.GameQuestionText.Length <= 0)
            {

                //הודעת שגיאה
                AlertEmptyQwastion = true;
                //סנקבר
                Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;
                Snackbar.Add("המשחק לא נשמר", Severity.Error, (options) =>
                {
                    options.CloseAfterNavigation = true;
                }
                );
            }
            //חסר נושא משחק
            if (GameToChack.GameTopic == null || GameToChack.GameTopic.Length <= 0)
            {
                //הודעת שגיאה
                AlertEmptyTopic = true;
                //סנקבר
                Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;
                Snackbar.Add("המשחק לא נשמר", Severity.Error, (options) =>
                {
                    options.CloseAfterNavigation = true;
                }
                );

            }
        }
    }






    //שיטה של מחיקת פריט
    private async Task DeleteAnswer(Answer TheAnswer)
    {

        //מחיקה מבסיס נתונים
        var getResponse = await Http.DeleteAsync("api/Answers/" + userId + "/" + currentGame.ID + "/" + TheAnswer.GameID + "/" + TheAnswer.ID);
        if (getResponse.IsSuccessStatusCode)
        {
            //   עדכון נתוני המשתמש שנמצאים בעמוד
            Game tempGame = getResponse.Content.ReadFromJsonAsync<Game>().Result;
            currentGame.GameAnswers = tempGame.GameAnswers;

            //הודעה שהפעולה בוצעה
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;
            Snackbar.Add("הפריט נמחק", Severity.Success, (options) =>
            {
                options.CloseAfterNavigation = true;
            }
            );
        }
        //במקרה של שגיאה פתיחת פופ אפ שגיאה מתאים
        else
        {
            string ErorType = getResponse.Content.ReadAsStringAsync().Result;


            switch (ErorType)
            {
                case "Game not found":
                    ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן שלא מצאנו את המשחק המדהים שלך.";
                    ErorButtonContent = "חזרה לעמוד התחברות";
                    break;
                case "Answer not found":
                    ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן שלא מצאנו את המסיח המדהים שלך. ";
                    ErorButtonContent = "הבנתי";
                    break;
                case "User not login":
                    ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן שלא התחברת למערכת.";
                    ErorButtonContent = "חזרה לעמוד התחברות";
                    break;
                case "EmptySession":
                    ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן ששעבר יותר מדי זמן ללא פעולה באתר ועליך להתחבר שוב למערכת.";
                    ErorButtonContent = "חזרה לעמוד התחברות";
                    break;
                default:
                    ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן שיש לנו תקלה בשרת. חכה מספר דקות ורענ ן את העמוד.";
                    ErorButtonContent = "הבנתי";
                    break;
            }
            OpenErorDialog();
        }

    }









    // העלאת תמונה להנחייה
    private async Task UploadFileGame(InputFileChangeEventArgs e)
    {
        AlertTooBigImgGame = false;

        var imageFiles = e.GetMultipleFiles();
        foreach (var file in imageFiles)
        {
            if (file.Size <= maxFileSize)
            {
                var buffer = new byte[file.Size];
                await file.OpenReadStream(maxFileSize).ReadAsync(buffer);
                var imageBase64 = Convert.ToBase64String(buffer);
                var saveResponse = await Http.PostAsJsonAsync("api/Games/upload/" + userId, imageBase64);

                if (saveResponse.IsSuccessStatusCode == true)
                {
                    string resizeUrl = saveResponse.Content.ReadAsStringAsync().Result;
                    myFileImage = resizeUrl;
                    currentGame.GameQuestionImge = resizeUrl;
                    //סנקבר
                    Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;
                    Snackbar.Add("התמונה עלתה בהצלחה", Severity.Success, (options) =>
                    {
                        options.CloseAfterNavigation = true;
                    }
                    );
                    //פוקוס אוטומטי על תיבת טקסט כדי שהיא תהפוך לאדומה
                    shortInputQwastion = true;

                }
                //במקרה של שגיאה פתיחת פופ אפ שגיאה מתאים
                else
                {
                    string ErorType = saveResponse.Content.ReadAsStringAsync().Result;

                    switch (ErorType)
                    {
                        case "User not login":
                            ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן שלא התחברת למערכת.";
                            ErorButtonContent = "חזרה לעמוד התחברות";
                            break;
                        case "EmptySession":
                            ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן ששעבר יותר מדי זמן ללא פעולה באתר ועליך להתחבר שוב למערכת.";
                            ErorButtonContent = "חזרה לעמוד התחברות";
                            break;
                        default:
                            ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן שיש לנו תקלה בשרת. חכה מספר דקות ורענ ן את העמוד.";
                            ErorButtonContent = "הבנתי";
                            break;
                    }
                    OpenErorDialog();
                }
            }
            else
            {
                AlertTooBigImgGame = true;
                //סנקבר
                Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;
                Snackbar.Add("תמונה כבדה מדי", Severity.Error, (options) =>
                {
                    options.CloseAfterNavigation = true;
                }
                );

            }
        }
    }


    //מחיקת תמונה מהנחייה
    private async Task DeleteImageGame(List<string> ImgNames)
    {
        
        foreach (string i in ImgNames)
        {
            DeletedImages.Add(i);
        }

        if (DeletedImages.Count > 0)
        {

            var saveResponse = await Http.PostAsJsonAsync("api/Games/deleteImages/" + userId, DeletedImages);

            if (saveResponse.IsSuccessStatusCode == true)
            {
                myFileImage = "";                

            }
            // במקרה של שגיאה פתיחת פופ אפ שגיאה מתאים
            else
            {
                string ErorType = saveResponse.Content.ReadAsStringAsync().Result;

                switch (ErorType)
                {
                    case "User not login":
                        ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן שלא התחברת למערכת.";
                        ErorButtonContent = "חזרה לעמוד התחברות";
                        break;
                    case "EmptySession":
                        ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן ששעבר יותר מדי זמן ללא פעולה באתר ועליך להתחבר שוב למערכת.";
                        ErorButtonContent = "חזרה לעמוד התחברות";
                        break;
                    default:
                        ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן שיש לנו תקלה בשרת. חכה מספר דקות ורענ ן את העמוד.";
                        ErorButtonContent = "הבנתי";
                        break;
                }
                OpenErorDialog();
            }
        }
    }







    // העלאת תמונה לפריט
    private async Task UploadFileAnswer(InputFileChangeEventArgs e)
    {
        AlertTooBigImgAnswer = false;

        var imageFiles = e.GetMultipleFiles();
        foreach (var file in imageFiles)
        {
            if (file.Size <= maxFileSize)
            {
                var buffer = new byte[file.Size];
                await file.OpenReadStream(maxFileSize).ReadAsync(buffer);
                var imageBase64 = Convert.ToBase64String(buffer);
                var saveResponse = await Http.PostAsJsonAsync("api/Answers/upload/" + userId, imageBase64);

                if (saveResponse.IsSuccessStatusCode == true)
                {
                    string resizeUrl1 = saveResponse.Content.ReadAsStringAsync().Result;
                    myFileImage1 = resizeUrl1;
                    currentAnswerEdite.Content = resizeUrl1;
                    currentAnswerEdite.HaveImge = true;

                    //סנקבר
                    Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;
                    Snackbar.Add("התמונה עלתה בהצלחה", Severity.Success, (options) =>
                    {
                        options.CloseAfterNavigation = true;
                    }
                );

                }
                //במקרה של שגיאה פתיחת פופ אפ שגיאה מתאים
                else
                {
                    string ErorType = saveResponse.Content.ReadAsStringAsync().Result;

                    switch (ErorType)
                    {
                        case "User not login":
                            ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן שלא התחברת למערכת.";
                            ErorButtonContent = "חזרה לעמוד התחברות";
                            break;
                        case "EmptySession":
                            ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן ששעבר יותר מדי זמן ללא פעולה באתר ועליך להתחבר שוב למערכת.";
                            ErorButtonContent = "חזרה לעמוד התחברות";
                            break;
                        default:
                            ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן שיש לנו תקלה בשרת. חכה מספר דקות ורענ ן את העמוד.";
                            ErorButtonContent = "הבנתי";
                            break;
                    }
                    OpenErorDialog();
                }
            }
            else
            {
                AlertTooBigImgAnswer = true;
                //סנקבר
                Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;
                Snackbar.Add("תמונה כבדה מדי", Severity.Error, (options) =>
                {
                    options.CloseAfterNavigation = true;
                }
                );

            }
        }
    }



    //מחיקת תמונה מפריט
    private async Task DeleteImageAnswer(List<string> ImgNames)
    {
        foreach(string i in ImgNames)
        {
            DeletedImages1.Add(i);
        }

        if (DeletedImages1.Count > 0)
        {
            var saveResponse = await Http.PostAsJsonAsync("api/Answers/deleteImages/" + userId, DeletedImages);

            if (saveResponse.IsSuccessStatusCode == true)
            {
                myFileImage1 = "";
                
            }
            // במקרה של שגיאה פתיחת פופ אפ שגיאה מתאים
            else
            {
                string ErorType = saveResponse.Content.ReadAsStringAsync().Result;

                switch (ErorType)
                {
                    case "User not login":
                        ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן שלא התחברת למערכת.";
                        ErorButtonContent = "חזרה לעמוד התחברות";
                        break;
                    case "EmptySession":
                        ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן ששעבר יותר מדי זמן ללא פעולה באתר ועליך להתחבר שוב למערכת.";
                        ErorButtonContent = "חזרה לעמוד התחברות";
                        break;
                    default:
                        ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן שיש לנו תקלה בשרת. חכה מספר דקות ורענ ן את העמוד.";
                        ErorButtonContent = "הבנתי";
                        break;
                }
                OpenErorDialog();
            }
        }
    }



    //שיטה של ביטול עריכה
    private async Task BackToAnswerBeforEditing()
    {
        //שליפה של השאלות והמשחק העדכני בבסיס הנתונים
        var getResponse = await Http.GetAsync("api/Games/byGameId/" + userId + "/" + gameId);
        if (getResponse.IsSuccessStatusCode)
        {
            //   עדכון נתוני המשתמש שנמצאים בעמוד
            Game tempGame = getResponse.Content.ReadFromJsonAsync<Game>().Result;
            currentGame.GameAnswers = tempGame.GameAnswers;

            await DeleteImageAnswer(ImgToDeletFromFolderAnswer);

            currentAnswerEdite = new Answer();
            //סנקבר
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;
            Snackbar.Add("העריכה בוטלה", Severity.Warning, (options) =>
            {
                options.CloseAfterNavigation = true;
            }
            );

        }
        //   אם חזרה שגיאה אז נפתח פופ אפ עם הודעת שגיאה מותאמת
        else
        {
            string ErorType = getResponse.Content.ReadAsStringAsync().Result;

            switch (ErorType)
            {
                case "User not found":
                    ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן שלא מצאנו את המשתמש המדהים שלך.";
                    ErorButtonContent = "חזרה לעמוד התחברות";
                    break;
                case "User not login":
                    ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן שלא התחברת למערכת.";
                    ErorButtonContent = "חזרה לעמוד התחברות";
                    break;
                case "EmptySession":
                    ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן ששעבר יותר מדי זמן ללא פעולה באתר ועליך להתחבר שוב למערכת.";
                    ErorButtonContent = "חזרה לעמוד התחברות";
                    break;
                default:
                    ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן שיש לנו תקלה בשרת. חכה מספר דקות ורענן את העמוד.";
                    ErorButtonContent = "הבנתי";
                    break;
            }
            OpenErorDialog();
        }



    }




    //מחיקת תמונה פיקטיבית הנחייה 
    private void FakeDeletImgQwation(string ImgName)
    {
        ImgToDeletFromFolderQwation.Add(ImgName);
        currentGame.GameQuestionImge = null;

        //חיווי כאילו התמונה נמקה
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;
        Snackbar.Add("התמונה נמחקה בהצלחה", Severity.Success, (options) =>
        {
            options.CloseAfterNavigation = true;
        }
        );

    }

    //מחיקת תמונה פיקטיבית מסיח 
    private void FakeDeletImgAnswer(string ImgName)
    {
        //שמירת התמונה המקורית
        if (OriginalImg == null)
        {
            OriginalImg = ImgName;
        }
        //מחיקה של שאר התמונות הזמניות
        else {
            ImgToDeletFromFolderAnswer.Add(ImgName);
        }

        currentAnswerEdite.Content = null;
        currentAnswerEdite.HaveImge = false;
        //חיווי כאילו התמונה נמקה
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;
        Snackbar.Add("התמונה נמחקה בהצלחה", Severity.Success, (options) =>
        {
            options.CloseAfterNavigation = true;
        }
        );

    }


    //שיטות קטנות וכלליות בתוך העמוד


    //שיטה שטוענת את המסיח לאיזור העריכה
    private void AnswerToEditePlace(Answer TheAnswer)
    {
        currentAnswerEdite = TheAnswer;
    }



    // שיטה שמציגה חלון שגיאה
    private void OpenErorDialog()
    {
        //   לא נסגר בלחיצה על ESC
        var options = new DialogOptions { CloseOnEscapeKey = false };
        //   אי אפשר ללחוץ על העמוד מתחת
        DialogOptions disableBackdropClick = new DialogOptions() { DisableBackdropClick = true };
        //   אפשרות לשללוח פרמטרים
        var parameters = new DialogParameters();
        //   שליחה של טקסט תוכן
        parameters.Add("ContentText", ErorContent);
        //שליחת תוכן כפתור אישור
        parameters.Add("ButtonText", ErorButtonContent);
        //   קריאה לפופ אפ ושליחה של כל המידע פלוס כותרת
        DialogService.Show<ErorDialog>("יוסטון, ווי האב אה פרובלם", parameters, options);

    }

    //שיטות שסופרות מגבלת תווים ומחזירות תיבה אדומה במידה ועוברים על המגבלה
    private IEnumerable<string> MaxCharacters20(string ch)
    {
        if (!string.IsNullOrEmpty(ch) && 20 < ch?.Length)
            yield return " הגעת למגבלת התווים האפשרית";
    }
    private IEnumerable<string> MaxCharacters50(string ch)
    {
        if (!string.IsNullOrEmpty(ch) && 50 < ch?.Length)
            yield return " הגעת למגבלת התווים האפשרית";
    }
    private IEnumerable<string> MaxCharacters25(string ch)
    {
        if (!string.IsNullOrEmpty(ch) && 25 < ch?.Length)
            yield return " הגעת למגבלת התווים האפשרית";
    }
    private IEnumerable<string> MaxCharacters35(string ch)
    {
        if (!string.IsNullOrEmpty(ch) && 35 < ch?.Length)
            yield return " הגעת למגבלת התווים האפשרית";
    }



    //שיטות שמשנות את כפתורי העלאת ומחיקת תמונה במשחק ללא פעילים
    private bool imgIsOnGame()
    {
        if (currentGame.GameQuestionImge != null)
        {
            return true;
        }
        return false;
    }
    private bool imgIsOffGame()
    {
        bool ToReturn = !imgIsOnGame();
        return ToReturn;
    }
    private bool imgIsOffAnswer()
    {
        bool ToReturn = !currentAnswerEdite.HaveImge;
        return ToReturn;
    }



    //בודק מגבלת פריטים
    private bool reachMaxItemNum()
    {
        if (currentGame.GameAnswers.Count >= 30)
        {
            return true;
        }
        return false;
    }


    //בודקת אם זה הפריט שעורכים
    private bool EditingThisNow(Answer TheAnswer)
    {
        if (TheAnswer.ID == currentAnswerEdite.ID)
        {
            return true;
        }
        return false;
    }


    //ספירת פריטים נכונים ולא נכונים
    private int boolAnswerCount(bool direction)
    {
        int count = 0;

        foreach (Answer a in currentGame.GameAnswers)
        {
            if (a.CorrectAnswer == direction)
            {
                count++;
            }
        }
        return count;
    }



}








