@page "/EditGame/{userId:int}/{gameId:int}"
@using ThePowerOfKnowledge.Shared.Entities;
@inject HttpClient Http
@inject NavigationManager nav
@inject IDialogService DialogService
@inject ISnackbar Snackbar


<h3>EditGame</h3>
@*//בדיקה*@

@*בדיקה שאכן יש משהו במשחק*@
@if (currentGame != null)
{
    @*תנאי סף וכפתור שמירה*@
    <MudContainer>

    </MudContainer>

    @*הגדרות משחק כלליות*@
    //מכיל את כל איזור העריכה
    <MudContainer Width="70%" Fixed="true">
        <MudTextField T="string" Counter="20" MaxLength="20" HelperText="מספר התווים: " Immediate="true" Validation="@(new Func<string, IEnumerable<string>>(MaxCharacters20))" Label="נושא המשחק: " Variant="Variant.Outlined" @bind-Value="currentGame.GameTopic" />
        @*שגיאה של לא הוכנס שום ערך לתוכן נושא*@
        @if (AlertEmptyTopic == true)
        {
            <MudAlert Severity="Severity.Warning" Variant="Variant.Outlined">יש להזין נושא למשחק</MudAlert>
        }

        <MudText Typo="Typo.h2">הנחייה</MudText>
        <br />
        @*שורה של הנחייה*@
        <MudGrid>
            <MudItem xs="3">
                <MudText>איספו בגירירה את כל התפוחים שעליהם </MudText>
            </MudItem>
            <MudItem xs="7">
                @*בדיקה שאין שגיאה מבדיקת אורך של התמונה*@
                @if (currentGame.GameQuestionImge != null)
                {
                    @*במידה ואין תמונה*@
                    @if (currentGame.GameQuestionImge.Length == 0)
                    {
                        <MudTextField T="string" Counter="50" MaxLength="50" HelperText="מספר התווים ללא תמונה: " Immediate="true" Validation="@(new Func<string, IEnumerable<string>>(MaxCharacters50))" Label="המשך ההנחייה: " Variant="Variant.Outlined" @bind-Value="currentGame.GameQuestionText" />
                    }

                    @*במידה ויש תמונה*@
                    @if (currentGame.GameQuestionImge.Length > 0)
                    {
                        <MudTextField T="string" Counter="50" MaxLength="50" HelperText="מספר התווים ללא תמונה: " Immediate="true" Validation="@(new Func<string, IEnumerable<string>>(MaxCharacters50))" Label="המשך ההנחייה: " Variant="Variant.Outlined" @bind-Value="currentGame.GameQuestionText" />
                    }
                }

                @*במידה והתמונה ריקה*@
                <MudTextField T="string" Counter="50" MaxLength="50" HelperText="מספר התווים ללא תמונה: " Immediate="true" Validation="@(new Func<string, IEnumerable<string>>(MaxCharacters50))" Label="המשך ההנחייה: " Variant="Variant.Outlined" @bind-Value="currentGame.GameQuestionText" />

            </MudItem>


            <MudItem xs="2">

                <InputFile id="fileInput1" hidden accept="image/png, image/gif, image/jpeg" />

                <MudIconButton HtmlTag="label"
                               Color="Color.Info"
                               Icon="@Icons.Filled.PhotoCamera"
                               for="fileInput1">
                </MudIconButton>


                <MudIconButton Color="Color.Info"
                               Icon="@Icons.Filled.Delete">
                </MudIconButton>

            </MudItem>
        </MudGrid>
        @*שגיאה של לא הוכנס שום ערך לתוכן שאלה*@
        @if (AlertEmptyQwastion == true)
        {
            <MudAlert Severity="Severity.Warning" Variant="Variant.Outlined">יש להזין טקסט להמשך ההנחייה</MudAlert>
        }

        @*מכיל את כל מה שקשור לעריכת פריט*@
        <MudContainer>
            <MudText Typo="Typo.h2">עריכת פריט</MudText>

            <MudGrid>
                <MudItem xs="6">
                    <MudTextField T="string" Counter="25" MaxLength="25" HelperText="מספר התווים: " Immediate="true" Validation="@(new Func<string, IEnumerable<string>>(MaxCharacters25))" Label="תוכן הפריט: " Variant="Variant.Outlined" @bind-Value="currentAnswerEdite.Content" Disabled="@currentAnswerEdite.HaveImge" />
                </MudItem>
                <MudItem xs="2">
                    <MudText>או</MudText>
                </MudItem>
                <MudItem xs="2">

                    <InputFile id="fileInput1" hidden accept="image/png, image/gif, image/jpeg" />

                    <MudIconButton HtmlTag="label"
                                   Color="Color.Info"
                                   Icon="@Icons.Filled.PhotoCamera"
                                   for="fileInput1">
                    </MudIconButton>


                    <MudIconButton Color="Color.Info"
                                   Icon="@Icons.Filled.Delete">
                    </MudIconButton>

                </MudItem>
            </MudGrid>
            @*שגיאה של לא הוכנס שום ערך לתוכן פריט*@
            @if (AlertEmptyAnswer == true)
            {
                <MudAlert Severity="Severity.Warning" Variant="Variant.Outlined">יש להזין טקסט או תמונה לתוכן הפריט</MudAlert>
            }

            <MudGrid>
                <MudItem xs="6">
                    <MudText>סמנו <MudIcon Color="Color.Success" Icon="@Icons.Filled.Check"></MudIcon> במידה והפריט מתאים להנחייה</MudText>
                </MudItem>
                <MudItem xs="2">
                    <MudCheckBox @bind-Checked="@currentAnswerEdite.CorrectAnswer" Color="Color.Success" Size="Size.Large"></MudCheckBox>
                </MudItem>
            </MudGrid>
            <MudButton @onclick="()=>SaveAnswer(currentAnswerEdite)" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" IconColor="Color.Secondary" Size="Size.Large">שמירת פריט</MudButton>

        </MudContainer>
        <MudButton @onclick="()=>SaveGame(currentGame)" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" IconColor="Color.Secondary" Size="Size.Large">שמירת משחק</MudButton>

    </MudContainer>


    @*טבלת פריטים*@
    <MudContainer>
        @*מחלק לשתי עמודות*@
        <MudGrid>
            @*פריטים נכונים*@
            <MudItem xs="6">
                <MudText Typo="Typo.h3">פריטים מתאימים</MudText>
                <MudText>מספר פריטים + </MudText>
                @*מכיל את כל הפריטים*@
                <MudContainer>

                    @foreach (Answer currentAnswer in currentGame.GameAnswers)
                    {


                        @if (currentAnswer.CorrectAnswer == true)
                        {

                            <MudCard>
                                @if (currentAnswer.HaveImge == false)
                                {
                                    <MudCardContent>
                                        <MudText>
                                            @currentAnswer.Content
                                        </MudText>
                                    </MudCardContent>

                                }
                                @if (currentAnswer.HaveImge == true)
                                {
                                    <MudCardMedia>

                                    </MudCardMedia>
                                }

                                <MudCardActions>
                                    <MudIconButton @onclick="()=>AnswerToEditePlace(currentAnswer)" Icon="@Icons.Filled.Edit" Color="Color.Default" />
                                    <MudIconButton @onclick="()=>DeleteAnswer(currentAnswer)" Icon="@Icons.Filled.Delete" Color="Color.Default" />
                                </MudCardActions>
                            </MudCard>
                        }
                    }

                </MudContainer>

                @*פריטים לא נכונים*@
            </MudItem>
            <MudItem xs="6">
                <MudText Typo="Typo.h3">פריטים לא מתאימים</MudText>
                <MudText>מספר פריטים + </MudText>

                <MudContainer>

                    @foreach (Answer currentAnswer in currentGame.GameAnswers)
                    {


                        @if (currentAnswer.CorrectAnswer == false)
                        {

                            <MudCard>
                                @if (currentAnswer.HaveImge == false)
                                {
                                    <MudCardContent>
                                        <MudText>
                                            @currentAnswer.Content
                                        </MudText>
                                    </MudCardContent>

                                }
                                @if (currentAnswer.HaveImge == true)
                                {
                                    <MudCardMedia>

                                    </MudCardMedia>
                                }

                                <MudCardActions>
                                    <MudIconButton @onclick="()=>AnswerToEditePlace(currentAnswer)" Icon="@Icons.Filled.Edit" Color="Color.Default" />
                                    <MudIconButton @onclick="()=>DeleteAnswer(currentAnswer)" Icon="@Icons.Filled.Delete" Color="Color.Default" />
                                </MudCardActions>
                            </MudCard>
                        }
                    }

                </MudContainer>

            </MudItem>
        </MudGrid>
    </MudContainer>
}



@code {
    //פרמטר המקבל ID של משחר בשורת הכתובה
    [Parameter]
    public int gameId { get; set; }

    //פרמטר המקבל ID של משתמש בשורת הכתובת
    [Parameter]
    public int userId { get; set; }

    //שומר את המשחק שעליו פועלים
    Game currentGame;

    //  מחרוזת ששמורת את הערך של הודעת השגיאה
    string ErorContent;
    //תוכן כפתור הודעת שגיאה
    string ErorButtonContent;

    //פריט חדש בטעינת עמוד
    Answer currentAnswerEdite = new Answer();

    //האם יש צורך בהודעת שגיאה של פריט ריק
    bool AlertEmptyAnswer = false;
    //האם יש צורך בהודעת שגיאה של נושא ריק
    bool AlertEmptyTopic = false;
    //האם יש צורך בהודעת שגיאה של הנחייה ריק
    bool AlertEmptyQwastion = false;


    //שליפת המשחק המדובר מבסיס הנתונים בטעינת עמוד
    protected async override Task OnInitializedAsync()
    {
        var getResponse = await Http.GetAsync("api/Games/byGameId/" + userId + "/" + gameId);
        if (getResponse.IsSuccessStatusCode)
        {
            currentGame = getResponse.Content.ReadFromJsonAsync<Game>().Result;

        }
        //   אם חזרה שגיאה אז נפתח פופ אפ עם הודעת שגיאה מותאמת
        else
        {
            string ErorType = getResponse.Content.ReadAsStringAsync().Result;

            switch (ErorType)
            {
                case "User not found":
                    ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן שלא מצאנו את המשתמש המדהים שלך.";
                    ErorButtonContent = "חזרה לעמוד התחברות";
                    break;
                case "User not login":
                    ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן שלא התחברת למערכת.";
                    ErorButtonContent = "חזרה לעמוד התחברות";
                    break;
                case "EmptySession":
                    ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן ששעבר יותר מדי זמן ללא פעולה באתר ועליך להתחבר שוב למערכת.";
                    ErorButtonContent = "חזרה לעמוד התחברות";
                    break;
                default:
                    ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן שיש לנו תקלה בשרת. חכה מספר דקות ורענן את העמוד.";
                    ErorButtonContent = "הבנתי";
                    break;
            }
            OpenErorDialog();
        }
    }






    //שיטה שטוענת את המסיח לאיזור העריכה
    private void AnswerToEditePlace(Answer TheAnswer)
    {
        currentAnswerEdite = TheAnswer;
    }






    //שיטה של עדכון מסיח או שמירת מסיח חדש
    private async Task SaveAnswer(Answer TheAnswer)
    {
        //איפוס התראות
        AlertEmptyAnswer = false;


        //תנאי לשמירה
        if (TheAnswer.Content != null)
        {

            //הוספה של מספר משחק
            if (TheAnswer.GameID != currentGame.ID)
            {
                TheAnswer.GameID = currentGame.ID;
            }

            //למסיח חדש
            if (TheAnswer.ID == 0)
            {
                //שליחת משחק חדש לבסיס נתונים
                var postResponse = await Http.PostAsJsonAsync("api/Answers/NewAnswer/" + userId + "/" + currentGame.ID, TheAnswer);
                //קבלת אישור פעולה
                if (postResponse.IsSuccessStatusCode == true)
                {
                    //עדכון המידע בעמוד
                    currentGame = postResponse.Content.ReadFromJsonAsync<Game>().Result;

                    //סנקבר
                    Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;
                    Snackbar.Add("המסיח נשמר", Severity.Success, (options) =>
                    {
                        options.CloseAfterNavigation = true;
                    }
                    );
                }
                //במקרה של שגיאה פתיחת פופ אפ שגיאה מתאים
                else
                {
                    //במידה והיתה שגיאה בדרך הצגת חלום שגיאה מתאים
                    string ErorType = postResponse.Content.ReadAsStringAsync().Result;

                    switch (ErorType)
                    {
                        case "Answer not found":
                            ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן שלא מצאנו את הפריט המדהים שלך.";
                            ErorButtonContent = "הבנתי";
                            break;
                        case "GameId Not Match":
                            ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן שיש שגיאה במשחק אליו משוייך המסיח. ";
                            ErorButtonContent = "הבנתי";
                            break;
                        case "User not login":
                            ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן שלא התחברת למערכת.";
                            ErorButtonContent = "חזרה לעמוד התחברות";
                            break;
                        case "EmptySession":
                            ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן ששעבר יותר מדי זמן ללא פעולה באתר ועליך להתחבר שוב למערכת.";
                            ErorButtonContent = "חזרה לעמוד התחברות";
                            break;
                        default:
                            ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן שיש לנו תקלה בשרת. חכה מספר דקות ורענן את העמוד.";
                            ErorButtonContent = "הבנתי";
                            break;
                    }
                    OpenErorDialog();

                }


            }



            //לעדכון מסיח
            else
            {

                //שליחת מידע לבסיס נתונים
                var updateResponse1 = await Http.PostAsJsonAsync("api/Answers/Update/" + userId + "/" + currentGame.ID, TheAnswer);
                //אישור ביצוע פעולה
                if (updateResponse1.IsSuccessStatusCode == true)
                {
                    //עדכון המידע בעמוד
                    currentGame = updateResponse1.Content.ReadFromJsonAsync<Game>().Result;
                    //סנקבר
                    Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;
                    Snackbar.Add("המסיח נשמר", Severity.Success, (options) =>
                    {
                        options.CloseAfterNavigation = true;
                    }
                    );

                }
                //במקרה של שגיאה פתיחת פופ אפ שגיאה מתאים
                else
                {
                    //במידה והיתה שגיאה בדרך הצגת חלום שגיאה מתאים
                    string ErorType1 = updateResponse1.Content.ReadAsStringAsync().Result;

                    switch (ErorType1)
                    {
                        case "Answer not found":
                            ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן שלא מצאנו את הפריט המדהים שלך.";
                            ErorButtonContent = "הבנתי";
                            break;
                        case "GameId Not Match":
                            ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן שיש שגיאה במשחק אליו משוייך המסיח. ";
                            ErorButtonContent = "הבנתי";
                            break;
                        case "User not login":
                            ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן שלא התחברת למערכת.";
                            ErorButtonContent = "חזרה לעמוד התחברות";
                            break;
                        case "EmptySession":
                            ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן ששעבר יותר מדי זמן ללא פעולה באתר ועליך להתחבר שוב למערכת.";
                            ErorButtonContent = "חזרה לעמוד התחברות";
                            break;
                        default:
                            ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן שיש לנו תקלה בשרת. חכה מספר דקות ורענן את העמוד.";
                            ErorButtonContent = "הבנתי";
                            break;
                    }
                    OpenErorDialog();

                }
            }
            currentAnswerEdite = new Answer();
        }
        else
        {
            //הצגת אלרט שגיאה מסיח ריק
            AlertEmptyAnswer = true;
            //סנקבר
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;
            Snackbar.Add("המסיח לא נשמר", Severity.Error, (options) =>
            {
                options.CloseAfterNavigation = true;
            }
            );
        }
    }





    //שיטה של עדכון משחק
    private async Task SaveGame(Game GameToChack)
    {
        //איפוס התראות
        AlertEmptyQwastion = false;
        AlertEmptyTopic = false;

        //בדיקה שהמשחק לא ריק
        if (GameToChack.GameTopic != null && GameToChack.GameQuestionText != null && GameToChack.GameTopic.Length > 0 && GameToChack.GameQuestionText.Length > 0)
        {
            //בדיקה שיש למשחק קוד משחק ובמידה ואין הזנה של אחד
            if (GameToChack.GamePin == 0)
            {
                GameToChack.GamePin = GameToChack.ID + 100;
            }

            //שליחת מידע לבסיס נתונים
            var updateResponse = await Http.PostAsJsonAsync("api/Games/Update/" + userId, GameToChack);
            //אישור ביצוע פעולה
            if (updateResponse.IsSuccessStatusCode == true)
            {
                //עדכון המידע בעמוד
                currentGame = updateResponse.Content.ReadFromJsonAsync<Game>().Result;

                //סנקבר
                Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;
                Snackbar.Add("המשחק נשמר", Severity.Success, (options) =>
                {
                    options.CloseAfterNavigation = true;
                }
                );

            }
            else
            {
                //במידה והיתה שגיאה בדרך הצגת חלום שגיאה מתאים
                string ErorType1 = updateResponse.Content.ReadAsStringAsync().Result;

                switch (ErorType1)
                {
                    case "User not found":
                        ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן שלא מצאנו את המשתמש המדהים שלך.";
                        ErorButtonContent = "חזרה לעמוד התחברות";
                        break;
                    case "Game not found":
                        ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן שלא מצאנו את המשחק המדהים שלך. ";
                        ErorButtonContent = "הבנתי";
                        break;
                    case "User not login":
                        ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן שלא התחברת למערכת.";
                        ErorButtonContent = "חזרה לעמוד התחברות";
                        break;
                    case "EmptySession":
                        ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן ששעבר יותר מדי זמן ללא פעולה באתר ועליך להתחבר שוב למערכת.";
                        ErorButtonContent = "חזרה לעמוד התחברות";
                        break;
                    default:
                        ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן שיש לנו תקלה בשרת. חכה מספר דקות ורענן את העמוד.";
                        ErorButtonContent = "הבנתי";
                        break;
                }
                OpenErorDialog();
            }

        }
        else
        {

            //לא עומד בתנאי שמירה
            //חסר טקסט להנחייה
            if (GameToChack.GameQuestionText == null || GameToChack.GameQuestionText.Length <= 0)
            {

                //הודעת שגיאה
                AlertEmptyQwastion = true;
                //סנקבר
                Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;
                Snackbar.Add("המשחק לא נשמר", Severity.Error, (options) =>
                {
                    options.CloseAfterNavigation = true;
                }
                );
            }
            //חסר נושא משחק
            if (GameToChack.GameTopic == null || GameToChack.GameTopic.Length <= 0)
            {
                //הודעת שגיאה
                AlertEmptyTopic = true;
                //סנקבר
                Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;
                Snackbar.Add("המשחק לא נשמר", Severity.Error, (options) =>
                {
                    options.CloseAfterNavigation = true;
                }
                );

            }
        }
    }






    //שיטה של מחיקת פריט
    private async Task DeleteAnswer(Answer TheAnswer)
    {

        //מחיקה מבסיס נתונים
        var getResponse = await Http.DeleteAsync("api/Answers/" + userId + "/" + currentGame.ID + "/" + TheAnswer.GameID + "/" + TheAnswer.ID);
        if (getResponse.IsSuccessStatusCode)
        {
            //   עדכון נתוני המשתמש שנמצאים בעמוד
            currentGame = getResponse.Content.ReadFromJsonAsync<Game>().Result;

            //הודעה שהפעולה בוצעה
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;
            Snackbar.Add("הפריט נמחק", Severity.Success, (options) =>
            {
                options.CloseAfterNavigation = true;
            }
            );
        }
        //במקרה של שגיאה פתיחת פופ אפ שגיאה מתאים
        else
        {
            string ErorType = getResponse.Content.ReadAsStringAsync().Result;
            Console.WriteLine("erorType: " + ErorType);

            switch (ErorType)
            {
                case "Game not found":
                    ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן שלא מצאנו את המשחק המדהים שלך.";
                    ErorButtonContent = "חזרה לעמוד התחברות";
                    break;
                case "Answer not found":
                    ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן שלא מצאנו את המסיח המדהים שלך. ";
                    ErorButtonContent = "הבנתי";
                    break;
                case "User not login":
                    ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן שלא התחברת למערכת.";
                    ErorButtonContent = "חזרה לעמוד התחברות";
                    break;
                case "EmptySession":
                    ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן ששעבר יותר מדי זמן ללא פעולה באתר ועליך להתחבר שוב למערכת.";
                    ErorButtonContent = "חזרה לעמוד התחברות";
                    break;
                default:
                    ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן שיש לנו תקלה בשרת. חכה מספר דקות ורענן את העמוד.";
                    ErorButtonContent = "הבנתי";
                    break;
            }
            OpenErorDialog();
        }




    }












    // שיטה שמציגה חלון שגיאה
    private void OpenErorDialog()
    {
        //   לא נסגר בלחיצה על ESC
        var options = new DialogOptions { CloseOnEscapeKey = false };
        //   אי אפשר ללחוץ על העמוד מתחת
        DialogOptions disableBackdropClick = new DialogOptions() { DisableBackdropClick = true };
        //   אפשרות לשללוח פרמטרים
        var parameters = new DialogParameters();
        //   שליחה של טקסט תוכן
        parameters.Add("ContentText", ErorContent);
        //שליחת תוכן כפתור אישור
        parameters.Add("ButtonText", ErorButtonContent);
        //   קריאה לפופ אפ ושליחה של כל המידע פלוס כותרת
        DialogService.Show<ErorDialog>("יוסטון, ווי האב אה פרובלם", parameters, options);

    }

    //ספירת מגבלת תווים

    private IEnumerable<string> MaxCharacters20(string ch)
    {
        if (!string.IsNullOrEmpty(ch) && 20 < ch?.Length)
            yield return "הגעת למדבלת התווים האפשרית";
    }
    private IEnumerable<string> MaxCharacters50(string ch)
    {
        if (!string.IsNullOrEmpty(ch) && 50 < ch?.Length)
            yield return "הגעת למדבלת התווים האפשרית";
    }
    private IEnumerable<string> MaxCharacters25(string ch)
    {
        if (!string.IsNullOrEmpty(ch) && 25 < ch?.Length)
            yield return "הגעת למדבלת התווים האפשרית";
    }




}

