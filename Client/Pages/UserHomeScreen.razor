@page "/UserHomeScreen/{userId:int}"
@using ThePowerOfKnowledge.Shared.Entities;
@inject HttpClient Http
@inject NavigationManager nav
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@*במידה ונמצא משתמש אז מציגים את כל התוכן*@
@if (currentUser != null)
{
    //כותרת
    <h1>המשחקים של @(currentUser.FirstName)</h1>

    //קונטיינר המכיל את כל הכרטיסיות
    <MudContainer Width="90%" Fixed="true">
        @*//כרטיסיה ריקה של חדש*@
        <MudCard Outlined="true" Class="cardGame">
            <MudCardActions>
                <MudIconButton Icon="@Icons.Filled.Add" Color="Color.Default" />
            </MudCardActions>
        </MudCard>


        @*לולאה שמציגה את כל המשחקים הקיימים של המתשמש*@
        @foreach (Game currentGame in currentUser.UserGames)
        {
            //כרטיסייה עם משחק קיים
            <MudCard Outlined="true" Class="cardGame">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.body1">@currentGame.GameTopic</MudText>
                        @if (currentGame.IsPublish == true)
                        {
                            <MudText Typo="Typo.body2">קוד משחק: @currentGame.GamePin</MudText>
                        }
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudText Typo="Typo.body2">מספר מסיחים: @currentGame.GameAnswers.Count</MudText>
                    <MudText Typo="Typo.body2">
                        <MudSwitch Checked="@currentGame.IsPublish" CheckedChanged="@((bool newState) => ChangeInSwich (currentGame))" Label="פרסום משחק" Color="Color.Info" Disabled="@GameNotInPublishCretiria(currentGame)" />
                        @if (GameNotInPublishCretiria(currentGame) == true)
                        {
                            <MudTooltip Duration="1000" Arrow="true" Placement="Placement.Left" >
                                <ChildContent>
                                    <MudIconButton Icon="@Icons.Outlined.Info" />
                                </ChildContent>
                                <TooltipContent>
                                    <MudText Typo="Typo.h6">משחקך לא עומד בתנאי הסף לפרסום</MudText>
                                    @foreach (string s in WhyGameNotInPublishCretiria(currentGame))
                                    {                                   
                                        <MudText Typo="Typo.body2">@s</MudText>
                                        <br />
                                    }

                                </TooltipContent>
                            </MudTooltip>
                        }
                    </MudText>
                </MudCardContent>
                <MudCardActions>
                    <MudIconButton Icon="@Icons.Filled.Edit" Color="Color.Default" @onclick="@(() => nav.NavigateTo("./EditGame/" + currentGame.ID))" />
                    <MudIconButton Icon="@Icons.Filled.Delete" Color="Color.Default" @onclick="() => DeleteGame(currentGame)" />
                </MudCardActions>
            </MudCard>
        }

    </MudContainer>



}


@code {
        // פרמטר שמתקבל מהכתובת
        [Parameter]
        public int userId { get; set; }

        //   שמירה של השליפה של היוזר המחובר
        User currentUser;

        //  מחרוזת ששמורת את הערך של הודעת השגיאה
        string ErorContent;
        //תוכן כפתור הודעת שגיאה
        string ErorButtonContent;

        //תוכן הודעה ווידוא פעולה
        string SureContent;



    //  שיטה ששולפת משתמש
    protected async override Task OnInitializedAsync()
    {
        var getResponse = await Http.GetAsync("api/Users/byUserId/" + userId);
        //   אם נמצא המשתמש כל המידע שלו נשמש במופע של משתמש
        if (getResponse.IsSuccessStatusCode)
        {
            currentUser = getResponse.Content.ReadFromJsonAsync<User>().Result;
        }
        //   אם חזרה שגיאה אז נפתח פופ אפ עם הודעת שגיאה מותאמת
        else
        {
            string ErorType = getResponse.Content.ReadAsStringAsync().Result;

            switch (ErorType)
            {
                case "User not found":
                    ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן שלא מצאנו את המשתמש המדהים שלך.";
                    ErorButtonContent = "חזרה לעמוד התחברות";
                    break;
                case "User not login":
                    ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן שלא התחברת למערכת.";
                    ErorButtonContent = "חזרה לעמוד התחברות";
                    break;
                case "EmptySession":
                    ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן ששעבר יותר מדי זמן ללא פעולה באתר ועליך להתחבר שוב למערכת.";
                    ErorButtonContent = "חזרה לעמוד התחברות";
                    break;
                default:
                    ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן שיש לנו תקלה בשרת. חכה מספר דקות ורענן את העמוד.";
                    ErorButtonContent = "הבנתי";
                    break;
            }
            OpenErorDialog();
        }
    }

    // שיטה שמציגה חלון שגיאת שרת
    private void OpenErorDialog()
    {
        //   לא נסגר בלחיצה על ESC
        var options = new DialogOptions { CloseOnEscapeKey = false };
        //   אי אפשר ללחוץ על העמוד מתחת
        DialogOptions disableBackdropClick = new DialogOptions() { DisableBackdropClick = true };
        //   אפשרות לשללוח פרמטרים
        var parameters = new DialogParameters();
        //   שליחה של טקסט תוכן
        parameters.Add("ContentText", ErorContent);
        //שליחת תוכן כפתור אישור
        parameters.Add("ButtonText", ErorButtonContent);
        //   קריאה לפופ אפ ושליחה של כל המידע פלוס כותרת
        DialogService.Show<ErorDialog>("יוסטון, ווי האב אה פרובלם", parameters, options);

    }


    //שיטה של מחיקת משחק
    private async Task DeleteGame(Game currentGameToDelete)
    {
        //חלונית ווידוא מחיקה

        //   לא נסגר בלחיצה על ESC
        var options = new DialogOptions { CloseOnEscapeKey = false };
        //   אי אפשר ללחוץ על העמוד מתחת
        DialogOptions disableBackdropClick = new DialogOptions() { DisableBackdropClick = true };
        //   אפשרות לשללוח פרמטרים
        var parameters = new DialogParameters();
        //   שליחה של טקסט תוכן
        SureContent = "רק רצינו לוודא שברצונך למחוק את המשחק בנושא " + currentGameToDelete.GameTopic;
        parameters.Add("ContentText", SureContent);
        //שליחת תוכן כפתור אישור
        parameters.Add("ButtonText", "מחיקת משחק");
        //שליחת צבע כפתור אישור
        parameters.Add("Color", Color.Error);
        //   קריאה לפופ אפ ושליחה של כל המידע פלוס כותרת
        var dialog = DialogService.Show<AreUSureDialog>("עצרו הכל!", parameters, options);

        //קבלת תשובה מהחלונית
        var result = await dialog.Result;

        //במידה ולחצו אישור
        if (!result.Cancelled)
        {
            var getResponse = await Http.DeleteAsync("api/Games/" + currentUser.ID + "/" + currentGameToDelete.ID);
            if (getResponse.IsSuccessStatusCode)
            {
                currentUser = getResponse.Content.ReadFromJsonAsync<User>().Result;
                Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;
                Snackbar.Add("המשחק נמחק", Severity.Success, (options) =>
                {
                    options.CloseAfterNavigation = true;
                }
                );
            }
            else
            {
                string ErorType = getResponse.Content.ReadAsStringAsync().Result;

                switch (ErorType)
                {
                    case "User not found":
                        ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן שלא מצאנו את המשתמש המדהים שלך.";
                        ErorButtonContent = "חזרה לעמוד התחברות";
                        break;
                    case "Game not found":
                        ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן שלא מצאנו את המשחק המדהים שלך. ";
                        ErorButtonContent = "הבנתי";
                        break;
                    case "User not login":
                        ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן שלא התחברת למערכת.";
                        ErorButtonContent = "חזרה לעמוד התחברות";
                        break;
                    case "EmptySession":
                        ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן ששעבר יותר מדי זמן ללא פעולה באתר ועליך להתחבר שוב למערכת.";
                        ErorButtonContent = "חזרה לעמוד התחברות";
                        break;
                    default:
                        ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן שיש לנו תקלה בשרת. חכה מספר דקות ורענן את העמוד.";
                        ErorButtonContent = "הבנתי";
                        break;
                }
                OpenErorDialog();
            }

        }


    }



    private bool GameNotInPublishCretiria(Game GameToChake)
    {
        int correctAnswersCount = 0;
        int wrongAnswersCount = 0;

        if (GameToChake.GameTopic.Length > 0 && GameToChake.GameQuestionText.Length > 0 && GameToChake.GameAnswers.Count > 4)
        {
            foreach (Answer a in GameToChake.GameAnswers)
            {
                if (a.CorrectAnswer == true)
                {
                    correctAnswersCount++;
                }
                else
                {
                    wrongAnswersCount++;
                }
            }

            if (correctAnswersCount > 0 && wrongAnswersCount > 0)
            {
                return false;
            }
        }

        return true;

    }

    private List<string> WhyGameNotInPublishCretiria(Game GameToChake)
    {
        List<string> msg = new List<string>();
        msg.Add("במשחקך חסר :");

        int correctAnswersCount = 0;
        int wrongAnswersCount = 0;

        if (GameToChake.GameTopic.Length <= 0)
        {
            msg.Add("נושא למשחק ") ;
        }
        if (GameToChake.GameQuestionText.Length <= 0)
        {
            msg.Add("הנחייה מילולית למשחק " );
        }
        if (GameToChake.GameAnswers.Count < 4)
        {
            msg.Add("לפחות 5 מסיחים " );
        }

        foreach (Answer a in GameToChake.GameAnswers)
        {
            if (a.CorrectAnswer == true)
            {
                correctAnswersCount++;
            }
            else
            {
                wrongAnswersCount++;
            }
        }

        if (correctAnswersCount==0)
        {
            msg.Add("לפחות מסיח אחד מתאים " );
        }

        if (wrongAnswersCount == 0)
        {
            msg.Add("לפחות מסיח אחד לא מתאים");
        }


        return msg;
    }




    private async Task ChangeInSwich(Game GameToChack)
    {
        switch (GameToChack.IsPublish)
        {
            //ביטול פרסום
            case true:
                GameToChack.IsPublish = false;
                var updateResponse = await Http.PostAsJsonAsync("api/Games/Update/" + currentUser.ID, GameToChack);
                if (updateResponse.IsSuccessStatusCode == true)
                {
                    //סנקבר
                    Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;
                    Snackbar.Add("המשחק במצב נסתר", Severity.Success, (options) =>
                    {
                        options.CloseAfterNavigation = true;

                    }
                    );
                    break;
                }
                string ErorType = updateResponse.Content.ReadAsStringAsync().Result;

                switch (ErorType)
                {
                    case "User not found":
                        ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן שלא מצאנו את המשתמש המדהים שלך.";
                        ErorButtonContent = "חזרה לעמוד התחברות";
                        break;
                    case "Game not found":
                        ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן שלא מצאנו את המשחק המדהים שלך. ";
                        ErorButtonContent = "הבנתי";
                        break;
                    case "User not login":
                        ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן שלא התחברת למערכת.";
                        ErorButtonContent = "חזרה לעמוד התחברות";
                        break;
                    case "EmptySession":
                        ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן ששעבר יותר מדי זמן ללא פעולה באתר ועליך להתחבר שוב למערכת.";
                        ErorButtonContent = "חזרה לעמוד התחברות";
                        break;
                    default:
                        ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן שיש לנו תקלה בשרת. חכה מספר דקות ורענן את העמוד.";
                        ErorButtonContent = "הבנתי";
                        break;
                }
                OpenErorDialog();
                break;

            //פירסום
            case false:
                if (GameNotInPublishCretiria(GameToChack) != true)
                {

                    GameToChack.IsPublish = true;

                    if (GameToChack.GamePin != 0)
                    {
                        GameToChack.GamePin = GameToChack.ID + 100;
                    }


                    var updateResponse1 = await Http.PostAsJsonAsync("api/Games/Update/" + currentUser.ID, GameToChack);
                    if (updateResponse1.IsSuccessStatusCode == true)
                    {
                        //סנקבר
                        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;
                        Snackbar.Add("המשחק פורסם", Severity.Success, (options) =>
                        {
                            options.CloseAfterNavigation = true;
                        }
                        );
                        break;
                    }
                    string ErorType1 = updateResponse1.Content.ReadAsStringAsync().Result;

                    switch (ErorType1)
                    {
                        case "User not found":
                            ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן שלא מצאנו את המשתמש המדהים שלך.";
                            ErorButtonContent = "חזרה לעמוד התחברות";
                            break;
                        case "Game not found":
                            ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן שלא מצאנו את המשחק המדהים שלך. ";
                            ErorButtonContent = "הבנתי";
                            break;
                        case "User not login":
                            ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן שלא התחברת למערכת.";
                            ErorButtonContent = "חזרה לעמוד התחברות";
                            break;
                        case "EmptySession":
                            ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן ששעבר יותר מדי זמן ללא פעולה באתר ועליך להתחבר שוב למערכת.";
                            ErorButtonContent = "חזרה לעמוד התחברות";
                            break;
                        default:
                            ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן שיש לנו תקלה בשרת. חכה מספר דקות ורענן את העמוד.";
                            ErorButtonContent = "הבנתי";
                            break;
                    }
                    OpenErorDialog();
                    break;
                }
                //לא עומד בתנאי פרסום
                ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן שהמשחק שלך לא עומד בתנאי הפרסום. ";
                ErorButtonContent = "הבנתי";
                OpenErorDialog();
                break;

            // כל מקרה אחר
            default:
                Console.WriteLine("on tring to publish a game the bool is publish was nither true or false " + "is publish bool: " + GameToChack.IsPublish);
                ErorContent = "החדשות הטובות הן שסוף העולם עוד לא הגיע, החדשות הרעות הן שיש לנו תקלה באתר. חכה מספר דקות ורענן את העמוד. אם התקלה חוזרת בבקשה צורך איתנו קשר במייל Alumappe@gmail.com בצירוף צילום מסך.";
                ErorButtonContent = "הבנתי";
                OpenErorDialog();
                break;

        }

    }





}
